name: Deploy Hugo Site to Netlify

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  HUGO_VERSION: 0.129.0
  GO_VERSION: 1.21.0
  NODE_VERSION: 18

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install Hugo
      run: |
        wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${{ env.HUGO_VERSION }}/hugo_extended_${{ env.HUGO_VERSION }}_Linux-64bit.deb \
        && sudo dpkg -i ${{ runner.temp }}/hugo.deb

    - name: Install dependencies
      run: |
        if [ -f package.json ]; then
          npm ci
        fi

    - name: Build Hugo site
      run: hugo --gc --minify

    - name: Test HTML validity
      run: |
        npm install -g html-validate
        find public -name "*.html" | head -20 | xargs html-validate --config .htmlvalidaterc.json || echo "HTML validation completed with warnings"

    - name: Check links (basic)
      run: |
        if command -v linkchecker &> /dev/null; then
          linkchecker --check-extern --ignore-url="^mailto:" public/index.html || echo "Link check completed with warnings"
        else
          echo "Linkchecker not available, skipping link validation"
        fi

    - name: Deploy to Netlify (main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=public --message="Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Deploy to Netlify (preview)
      if: github.event_name == 'pull_request'
      uses: netlify/actions/cli@master
      with:
        args: deploy --dir=public --message="Preview deploy from PR ${{ github.event.number }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: Comment PR with preview URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: deployments } = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha
          });
          
          if (deployments.length > 0) {
            const deployment = deployments[0];
            const { data: statuses } = await github.rest.repos.listDeploymentStatuses({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id
            });
            
            const successStatus = statuses.find(status => status.state === 'success');
            if (successStatus) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ðŸš€ Preview deployed to: ${successStatus.target_url}`
              });
            }
          }

  performance-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun --config=.lighthouserc.json || echo "Lighthouse audit completed with warnings"
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  content-validation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Validate markdown files
      run: |
        find content -name "*.md" -type f | while read file; do
          echo "Checking $file"
          # Basic front matter validation
          if ! head -1 "$file" | grep -q "^---$"; then
            echo "Warning: $file may be missing front matter"
          fi
          
          # Check for required front matter fields
          if ! grep -q "^title:" "$file"; then
            echo "Warning: $file missing title field"
          fi
          
          if ! grep -q "^date:" "$file"; then
            echo "Warning: $file missing date field"
          fi
        done

    - name: Check for duplicate content
      run: |
        # Simple duplicate content check
        find content -name "*.md" -exec basename {} \; | sort | uniq -d | while read duplicate; do
          echo "Warning: Duplicate filename detected: $duplicate"
        done