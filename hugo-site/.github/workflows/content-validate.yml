name: Content Validation

on:
  push:
    paths:
      - 'content/**'
      - 'data/**'
      - '_data/**'
  pull_request:
    paths:
      - 'content/**'
      - 'data/**'
      - '_data/**'

jobs:
  validate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install validation tools
      run: |
        npm install -g remark-cli remark-preset-lint-recommended
        npm install -g alex
        npm install -g write-good

    - name: Validate markdown syntax
      run: |
        find content -name "*.md" -type f | while read file; do
          echo "Validating markdown syntax: $file"
          remark "$file" --use remark-preset-lint-recommended --no-stdout || echo "Warning in $file"
        done
      continue-on-error: true

    - name: Check front matter structure
      run: |
        echo "Validating front matter structure..."
        find content -name "*.md" -type f | while read file; do
          echo "Checking $file"
          
          # Check if file starts with front matter
          if ! head -1 "$file" | grep -q "^---$"; then
            echo "❌ $file: Missing front matter delimiter"
          fi
          
          # Check for required fields
          if ! grep -q "^title:" "$file"; then
            echo "⚠️ $file: Missing title field"
          fi
          
          if ! grep -q "^date:" "$file"; then
            echo "⚠️ $file: Missing date field"
          fi
          
          # Check date format
          if grep -q "^date:" "$file"; then
            date_line=$(grep "^date:" "$file" | head -1)
            if ! echo "$date_line" | grep -E "date: [0-9]{4}-[0-9]{2}-[0-9]{2}"; then
              echo "⚠️ $file: Date format should be YYYY-MM-DD"
            fi
          fi
        done

    - name: Check for duplicate titles
      run: |
        echo "Checking for duplicate titles..."
        find content -name "*.md" -exec grep -l "^title:" {} \; | while read file; do
          title=$(grep "^title:" "$file" | head -1 | cut -d':' -f2- | sed 's/^[ "]*//;s/[ "]*$//')
          echo "$title|$file"
        done | sort | uniq -d -f1 | while IFS='|' read title file; do
          echo "⚠️ Duplicate title '$title' found in: $file"
        done

    - name: Content quality check
      run: |
        echo "Running content quality checks..."
        find content -name "*.md" -type f | while read file; do
          echo "Checking content quality: $file"
          
          # Extract content without front matter
          sed '1,/^---$/d; /^---$/,$d' "$file" > /tmp/content_check.txt
          
          # Check for sufficient content
          word_count=$(wc -w < /tmp/content_check.txt)
          if [ "$word_count" -lt 50 ]; then
            echo "⚠️ $file: Content seems short ($word_count words)"
          fi
          
          # Use alex for inclusive language (if available)
          if command -v alex &> /dev/null; then
            alex /tmp/content_check.txt || echo "Alex suggestions for $file"
          fi
          
          # Use write-good for writing quality (if available)
          if command -v write-good &> /dev/null; then
            write-good /tmp/content_check.txt || echo "Write-good suggestions for $file"
          fi
        done
      continue-on-error: true

    - name: Check for broken internal links
      run: |
        echo "Checking for broken internal links..."
        find content -name "*.md" -type f | while read file; do
          # Extract relative links
          grep -oE '\[([^\]]*)\]\(([^)]*)\)' "$file" | grep -E '\]\(/' | while IFS= read -r link; do
            url=$(echo "$link" | sed 's/.*](\([^)]*\)).*/\1/')
            
            # Check if internal link exists
            if [[ "$url" =~ ^/ ]]; then
              target_file="content${url%/}/index.md"
              if [[ ! -f "$target_file" ]]; then
                target_file="content${url}.md"
                if [[ ! -f "$target_file" ]]; then
                  echo "⚠️ $file: Broken internal link: $url"
                fi
              fi
            fi
          done
        done
      continue-on-error: true

    - name: Validate YAML/TOML data files
      run: |
        echo "Validating data files..."
        
        # Check YAML files
        find data _data -name "*.yml" -o -name "*.yaml" 2>/dev/null | while read file; do
          echo "Validating YAML: $file"
          python3 -c "
import yaml
import sys
try:
    with open('$file', 'r') as f:
        yaml.safe_load(f)
    print('✅ $file: Valid YAML')
except yaml.YAMLError as e:
    print('❌ $file: YAML Error -', e)
    sys.exit(1)
except FileNotFoundError:
    pass
" || echo "YAML validation failed for $file"
        done
        
        # Check TOML files (if any)
        find . -name "*.toml" | while read file; do
          echo "Validating TOML: $file"
          python3 -c "
import tomllib if hasattr(__builtins__, 'tomllib') else tomli
import sys
try:
    with open('$file', 'rb') as f:
        data = tomllib.load(f)
    print('✅ $file: Valid TOML')
except Exception as e:
    print('❌ $file: TOML Error -', e)
" || echo "TOML validation completed with warnings for $file"
        done
      continue-on-error: true

    - name: Generate validation report
      run: |
        echo "## Content Validation Report" > validation-report.md
        echo "Generated: $(date)" >> validation-report.md
        echo "" >> validation-report.md
        
        file_count=$(find content -name "*.md" | wc -l)
        echo "- **Total markdown files:** $file_count" >> validation-report.md
        
        word_count=$(find content -name "*.md" -exec cat {} \; | wc -w)
        echo "- **Total word count:** $word_count" >> validation-report.md
        
        echo "- **Validation status:** Complete" >> validation-report.md
        
        echo "Validation report generated"
        cat validation-report.md

    - name: Upload validation report
      uses: actions/upload-artifact@v3
      with:
        name: content-validation-report
        path: validation-report.md
        retention-days: 30